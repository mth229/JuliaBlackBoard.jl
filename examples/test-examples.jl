## A script to generate a tab-separated-values file
## containing questions for a pool or test to upload
## in batch mode to BlackBoard
## Questions can be formatted using MarkDown
## or LaTeX and can be templated so that randomization
## (for pools) can be performed
## Several BlackBoard question types can be used.

using JuliaBlackBoard


# Packages used in the following examples
using Plots
using StatsBase # for mean
using GLM       # for lm
using RCall     # for calling out to R for an example


# we will write the output to nm.txt
nm = replace(basename(@__FILE__), r".jl$" => "") # grab names


# open the filename for writing
open("$nm.txt", "w") do io


    ## ---- Question ----
    ## Simple Markdown question
    ## mt"..." is exported from Mustache
    q = mt"""
# The mean

Find the mean of

```
2 3 4
```    
"""

    # use a NUM type with answer computed
    question(io, NUM,
             q,                  # question
             mean((2,3,4))       # answer
             )

    ## Note: the use of mt"""...""" makes the multi-line string into a Mustache
    ## template. For randomization problems this will be more performant.
    ## This is not necessary for the above, but is useful in general.
    ## For string interpolation, use just """...""".
    


    
    ## ---- Question ----
    ## Same as above, but we use a Mustache template
    ## so that we can do randomization
    ##
    ## The bit below: {{{:xs}}}
    ## will be substituted in by the keyword argument to `q` (defined, as `q = mt...`)
    q = mt"""
# The mean

Find the mean of

```
{{{:xs}}}
```    
"""

    for xs in ((2,3,4),
               (3,4,5))
        # use a NUM type with answer computed
        question(io, NUM,
                 q(xs = join(xs, ",")), # question
                 mean(xs))              # answer
    end

    ## For more detail, when `mt` is used to create a question, then the
    ## substitution of template variables (e.g. `{{{:xs}}}`) is done by
    ## calling the question like a function with `xs` as a named argument.
    ## This allows 0 or more such subsitutions. (Variables are specified as symbol in the
    ## template). The distinction between triple and double brackets is related to HTML
    ## replacement of special entitities. Using triple braces is recommended.


    
    ## ---- Question ----    
    ## Same question with some LaTeX code. This uses HTML to represent the LaTeX
    ## BlackBoard does not allow us to upload yÌ‚ (unicode) or MathML so we
    ## resort to HTML as generated by `tth`.
    ##
    ## This requires `tth` (https://sourceforge.net/projects/tth/) to be available as `tth`.
    ##
    ## tth does a poor job with inline math that has height, e.g. $\hat{y}$, $\bar{x}$. The -t
    ## switch is used, as the alternative doesn't seem to work at all. It is suggested to avoid these
    ## annotations, as done here:
     q = mt"""
# The mean

Find the mean,

$$
xbar = \frac{x_1 + x_2 + \cdots + x_n}{n}.
$$

of

```
2 3 4
```    
"""
    question(io, NUM, q, (), mean((2,3,4)))

    ## ---- Question ----
    ## Same question with LaTeX generating an image for substition. We use
    ## a different template for the question -- one
    ## that only loads an image (png) of the file generated by calling `LaTeX` on
    ## the question.
    ##
    ## The conversion for pdf to png works very well for Macs, where a native converter is
    ## used. However, for non Macs the default seems lossy.
    q = mt"""
\section{The mean}

Find the mean, $\bar{x}$, of

\begin{verbatim}
2 3 4
\end{verbatim}
"""

    question_tpl = mt"""![]({{{:latex}}})"""
    latex = LaTeX(q)
    question(io, NUM, question_tpl(latex=latex), mean((2,3,4)))

    

    ## ---- Question ----    
    ## Same question with randomization.
    q = mt"""
Find the mean, $\bar{x}$, of

\begin{verbatim}
{{:xs}}
\end{verbatim}
"""

    ## Note: When viewing the above question on blackboard, there will
    ## be no identifying text in the short preview mode of the pool
    ## viewer. If might be a good idea to have a slightly more general
    ## question template, something like this where the "section" is
    ## moved into the question template
    question_tpl = mt"""
## The mean

![]({{{:latex}}})
"""
    for xs in ((1,2,3), (4,5,6))
        question_context = (xs = join(xs, ", "), )
        latex = LaTeX(q(xs = join(xs,", ")))
        question(io, NUM,
                 question_tpl(latex=latex),
                 mean((2,3,4)))
    end

    ## ---- Question ----    
    ## Using Plots to generate a plot and show inline
    ## As with LaTeX, we include a plot with the figure markup: ![]()
    ## We use `Plot(p)` to generate the plot for rendering (using Base64 encoding)

    q = mt"""
# Regression line
   
Estimate the slope of the regression line from the following graph

![]({{{:plot}}})
"""

    xs = rand(25)
    ys = 1 .+ 2*xs + 0.25 * rand(25)
    res = lm(@formula(y ~ x), (y=ys, x=xs))
    a, b = coef(res)
    p = scatter(xs, ys, legend=false)
    plot!(p, x -> a + b*x, extrema(xs)...)
    
    question(io, NUM, q(plot=Plot(p)), b, 1/10) # last number is tolerance


    ## ---- Question ----
    ## Using R to generate a plot
    ## This is almost the same
    ## Here we create a png file on the file system, so we use `File` to produce the
    ## the graph for rendering. File could be used for any png file on a local drive
    q = mt"""
# Regression line
   
Estimate the slope of the regression line from the following graph

![]({{{:plot}}})
"""

    pngfile = tempname() * ".png"
    
    @rput pngfile
    R"""
xs = rnorm(20)
ys = rnorm(20)
f = ys ~ xs
res = lm(f)

png(pngfile)
plot(f)
abline(res)
dev.off()
"""
    res = @rget res
    a, b = round.(res[:coefficients], digits=1)
    
    question(io, NUM,
             q(plot=File(pngfile)),   # question
             b, 0.5)                  # answer and tolerance
   
    ## ---- Question ----
    ## Different question types:
    ## There a some of https://help.blackboard.com/Learn/Instructor/Tests_Pools_Surveys/Reuse_Questions/Upload_Questions
    ## supported.
    ## The answers are formatted differently for each. For the above we
    ## had NUM, an answer is just a number and an optional absolute tolerance

    ## Multiple Choice
    ## answer is a  tuple of pairs ("answer 1"=>false, "answer 2"=>true)

    q = mt"""
## Multiple choice

Which is true
"""

    answers = ("The **earth** is flat"=>false,
               "The **sky** is falling"=>false,
               "climate change is real"=>true)
    question(io, MC, q, answers)

    ## ---- Question ----

    ## Multiple answer
    ## As with MC, only 1 or more true answers
    q = mt"""
## Multiple answer

Which is **false**
"""

    answers = ("The earth is flat"=>true,
               "The sky is falling"=>true,
               "climate change is real"=>false)
    question(io, MA, q, answers)

    
    ## ---- Question ----
    ## True False has a boolean answer

    q = mt"""
## True/false

Is $2 > 3$?
"""
    question(io, TF, q, false)

    ## ---- Question ----
    ## Fill in the blank.
    ## Answer is a tuple of values for matching, case insensitively
    ## Would need to hand edit for other matches

    q = mt"""
## Fill in the blanks

The () brown fox jumped over the lazy dog.
"""

    answers = ("quick",) # only one option for an answer
    question(io, FIB, q, answers)


    ## ---- Question ----
    ## Fill in blank plus
    ##
    ## The format consists of a list of variable-answers where each
    ## variable-answer is composed of the variable name and a list of
    ## correct answers for that variable. Variable-answers are
    ## delimited by an empty field.
    q = mt"""
## Fill in blank -- plus!

Use a letter or name

The first three non-negative integers are (), (), and ()
"""
    answers = ("one" => ("one", "1"),
               "two" => ("two", "2"),
               "three" => ("three", "3")
               )
    question(io, :FIB_PLUS, q, answers)

    ## ---- Question ----
    ## ORD:
    ## Text within ( ) may be repeated for
    ## each of the answers that are part of the Ordering question. The
    ## maximum number of answers is 100. The order typed in the file
    ## is the correct order. The system will randomly order the
    ## answers.
    q = mt"""

## Ordered

The numbers in order are (), (), (), (), and ()
"""
    answers = ("one", "two", "three", "four", "five")
    question(io, ORD, q, answers)


    ## ---- Question ----
    ## MAT
    ## Text within ( ) may be repeated for each of the answers that
    ## are part of the Matching question. The maximum number of
    ## answers is 100. The system will randomly order the answers and
    ## their question. When uploading a matching question, you must
    ## have a one-to-one relationship between questions and
    ## answers. If not, correct answers may be marked incorrect if
    ## more than one answer has the same value.

    q = mt"""
## Matching

The first letter is () 

The first non-negative integer is ()
"""
    answers = ("a"=>"Eh", "one"=>"won")
    question(io, MAT, q, answers)


    ## ---- Question ----
    ## Likert scale
    q = mt"""
Do you like BlackBoard?
"""
    question(io, OP, q)


    ## ---- Question ----
    ## JUMBLED_SENTENCE
    ## The format consists of a list of choices-answers. Each
    ## choice-answer consists of the choice followed by the list of
    ## variables for which that choice is the correct answer. An empty
    ## field indicates the end of a choice answer. A choice
    ## immediately followed by an empty field indicates that choice is
    ## not the correct answer for any variable.
    q = mt"""
## Jumbled sentence

Question goes here
"""

    answers = ("var1" => ("choice 1", "choice 2"),
               "var2" => ("choice 3", "choice 4"),
               nothing => ("choice 5",)
               )
    question(io, JUMBLED_SENTENCE, q, answers)

    ## ---- Question ----
    ## QUIZ_BOWL
    ##
    ## The format consists of a list of valid question words followed
    ## by an empty field and a list of valid answer phrases.
    q = mt"""
# quiz bowl

[Answer the following with a question, use a question mark in your response.]
"""
    answers = ("The conversion of sediment to rock"=>"What is lithification?",
               "The conversion of rock to sediment"=>"What is grunge metal?")
    question(io, QUIZ_BOWL, q, answers)
    
    
    ## Short response
    ## answer is a prompt

    q = mt"""
## Short response

Did you like this test?
"""
    question(io, SR, q, "A quick answer")

    
    ## ---- Question ----
    ## Essay. No context or answer is necessary
    q = mt"""
## Essay

Please write more...
"""
    question(io, ESS, q)

    ## ---- Question ----
    ## File upload. No context or answer is necessary

    q = mt"""
## File upload

Upload a screen shot. Please use a scanning feature on your phone (e.g., as provided  in the iPhone's
Notes app)
"""
    question(io, FIL, q)

    

    
end
